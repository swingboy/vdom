{"version":3,"sources":["webpack:///webpack/bootstrap 3fb9d92f3477180a9de1","webpack:///./util.js","webpack:///./patch.js","webpack:///./main.js","webpack:///./velement.js","webpack:///./diff.js","webpack:///./listdiff2.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;ACtDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;AC5GA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC,oBAAoB;AACpD,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;;AAEhB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,0B;;;;;;ACtDA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,qCAAqC;AAChE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;;;;;;ACvGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3fb9d92f3477180a9de1","/*********************************辅助类util*************************************/\n//辅助类 Util\nvar util = {};\n\nutil.type = function(obj) {\n    return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '');\n}\n\nutil.isArray = function(list) {\n    return util.type(list) === 'Array';\n}\n\nutil.isString = function(list) {\n    return util.type(list) == 'String';\n}\n\nutil.each = function(array, fn) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        fn(array[i], i);\n    }\n}\n\nutil.toArray = function(listLike) {\n    if (!listLike) {\n        return [];\n    }\n    var list = [];\n    for (var i = 0, len = listLike.length; i < len; i++) {\n        list.push(listLike[i]);\n    }\n    return list;\n}\n\nutil.setAttr = function(node, key, value) {\n    switch (key) {\n        case 'style':\n            node.style.cssText = value;\n            break;\n        case 'value':\n            var tagName = node.tagName || '';\n            tagName = tagName.toLowerCase();\n            if (tagName === 'input' || tagName === 'textarea') {\n                node.value = value;\n            } else {\n                node.setAttribute(key, value);\n            }\n            break;\n        default:\n            node.setAttribute(key, value);\n            break;\n    }\n}\n\n\nmodule.exports = util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./util.js\n// module id = 0\n// module chunks = 0","/*\n * 用于记录两个虚拟dom之间差异的数据结构\n */ \n\nvar util = require('./util');\n//每个节点有四种变动\n//替换\nvar REPLACE = 0;\n//排序\nvar REORDER = 1;\n//属性变化\nvar PROPS = 2;\n//文本\nvar TEXT = 3;\n\nfunction patch(node, patches) {\n    var walker = {\n        index: 0\n    };\n    dfsWalk(node, walker, patches);\n}\n\npatch.REPLACE = REPLACE;\npatch.REORDER = REORDER;\npatch.PROPS = PROPS;\npatch.TEXT = TEXT;\n\n//深度优先遍历dom结构\nfunction dfsWalk(node, walker, patches) {\n    var currentPatches = patches[walker.index];\n    var len = node.childNodes ? node.childNodes.length : 0;\n    for (var i = 0; i < len; i++) {\n        var child = node.childNodes[i];\n        walker.index ++ ;\n        dfsWalk(child, walker, patches);\n    }\n    //如果当前节点存在差异\n    if (currentPatches) {\n        applyPatches(node, currentPatches);\n    }\n}\n\nfunction applyPatches(node, currentPatches) {\n    util.each(currentPatches, function(currentPatch) {\n        switch (currentPatch.type) {\n            case REPLACE:\n                var newNode = (typeof currentPatch.node === 'String') ? document.createTextNode(currentPatch.node) : currentPatch.node.render();\n                node.parentNode.replaceChild(newNode, node);\n                break;\n            case REORDER:\n                reoderChildren(node, currentPatch.moves);\n                break;\n            case PROPS:\n                setProps(node, currentPatch.props);\n                break;\n            case TEXT:\n                if (node.textContent) {\n                    node.textContent = currentPatch.content;\n                } else {\n                    node.nodeValue = currentPatch.content;\n                }\n                break;\n            default:\n                throw new Error('Unknow patch type ' + currentPatch.type);\n        }\n    });\n}\n\nfunction reoderChildren(node, moves) {\n    var staticNodeList = util.toArray(node.childNodes);\n    var maps = {};\n    util.each(staticNodeList, function(node) {\n        if (node.nodeType === 1) {\n            var key = node.getAttribute('key');\n            if (key) {\n                maps[key] = node;\n            }\n        }\n    });\n\n    util.each(moves, function(move) {\n        var index = move.index;\n        if (move.type === 0) { // 变动类型为删除节点\n            if (staticNodeList[index] === node.childNodes[index]) {\n                node.removeChild(node.childNodes[index]);\n            }\n            staticNodeList.splice(index, 1);\n        } else {\n            var insertNode = maps[move.item.key] \n                ? maps[move.item.key] : (typeof move.item === 'object') \n                ? move.item.render() : document.createTextNode(move.item);\n            staticNodeList.splice(index, 0, insertNode);\n            node.insertBefore(insertNode, node.childNodes[index] || null);\n        }\n    });\n}\n\nfunction setProps(node, props) {\n    for (var key in props) {\n        if (props[key] === void 666) {\n            node.removeAttribute(key);\n        } else {\n            var value = props[key];\n            util.setAttr(node, key, value);\n        }\n    }\n}\n\nmodule.exports = patch;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./patch.js\n// module id = 1\n// module chunks = 0","var velement = require('./velement');\nvar diff = require('./diff');\nvar patch = require('./patch');\nvar vdom = velement('div', { 'id': 'container' }, [\n    velement('h1', { style: 'color:red',  }, ['simple virtual dom']),\n    velement('p', ['hello world']),\n    velement('ul', [velement('li', ['item #1']), velement('li', ['item #2'])]),\n]);\nvar rootnode = vdom.render();\n\ndocument.body.appendChild(rootnode);\n\nsetTimeout(function(){\n\tvar newVdom = velement('div', { 'id': 'container' }, [\n\t\tvelement('h5', { style: 'color:yellow' }, ['simple virtual dom little']),\n\t    velement('p', ['hello world new']),\n\t    velement('ul', [velement('li', ['item #1 new']), velement('li', ['item #2 new']), velement('li', ['item #3 new'])]),\n\t]);\n\tvar patches = diff(vdom, newVdom);\n\tconsole.log(patches);\n\tpatch(rootnode, patches);\n}, 1500);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./main.js\n// module id = 2\n// module chunks = 0","var util = require('./util');\n//虚拟dom\nvar VElement = function(tagName, props, children) {\n    //保证只能通过如下方式调用：new VElement\n    if (!(this instanceof VElement)) {\n        return new VElement(tagName, props, children);\n    }\n    \n    //可以通过只传递tagName和children参数\n    if (util.isArray(props)) {\n        children = props;\n        props = {};\n    }\n\n    //设置虚拟dom的相关属性\n    this.tagName = tagName;\n    this.props = props || {};\n    this.children = children || [];\n    this.key = props ? props.key : void 666;\n    var count = 0;\n\n    // debugger; TODO\n\n    util.each(this.children, function(child, i) {\n        if (child instanceof VElement) {\n            count += child.count;\n        } else {\n            children[i] = '' + child;\n        }\n        count++;\n    });\n    this.count = count;\n}\n\n//根据虚拟dom创建真实dom\nVElement.prototype.render = function() {\n    //创建标签\n    var el = document.createElement(this.tagName);\n    //设置标签的属性\n    var props = this.props;\n    for (var propName in props) {\n        var propValue = props[propName]\n        util.setAttr(el, propName, propValue);\n    }\n\n    //一次创建子节点的标签\n    util.each(this.children, function(child) {\n        //如果子节点仍然为velement，则递归的创建子节点，否则直接创建文本类型节点\n        var childEl = (child instanceof VElement) ? child.render() : document.createTextNode(child);\n        el.appendChild(childEl);\n    });\n    return el;\n}\n\nmodule.exports = VElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./velement.js\n// module id = 3\n// module chunks = 0","var util = require('./util');\nvar patch = require('./patch');\n\n//深度遍历两个列表数据，每层的节点进行对比，记录下每个节点的差异。并返回该对象的差异。\nvar listDiff = require('./listdiff2');\n\nfunction diff(oldTree, newTree) {\n    debugger;\n    var index = 0;\n    var patches = {};\n    dfsWalk(oldTree, newTree, index, patches);\n    return patches;\n}\n\n\nfunction dfsWalk(oldNode, newNode, index, patches){\n    var currentPatch = [];\n    // 如果oldNode被remove掉了\n    if (newNode === null) {\n        //依赖listdiff算法进行标记为删除  // 先不做操作, 具体交给 list diff 处理\n    }else if (util.isString(oldNode) && util.isString(newNode)) {\n        if (oldNode !== newNode) {\n            //如果是文本节点则直接替换文本\n            currentPatch.push({\n                type: patch.TEXT,\n                content: newNode\n            });\n        }\n    }else if (oldNode.tagName === newNode.tagName && oldNode.key === newNode.key) {\n        //节点类型相同\n        //比较节点的属性是否相同\n        var propsPatches = diffProps(oldNode, newNode);\n        if (propsPatches) {\n            currentPatch.push({\n                type: patch.PROPS,\n                props: propsPatches\n            });\n        }\n        //比较子节点是否相同\n        diffChildren(oldNode.children, newNode.children, index, patches, currentPatch);\n    } else {\n        //节点的类型不同，直接替换\n        currentPatch.push({ type: patch.REPLACE, node: newNode });\n    }\n\n    if (currentPatch.length) {\n        patches[index] = currentPatch;\n    }\n}\n\nfunction diffProps(oldNode, newNode){\n    var count = 0;\n    var oldProps = oldNode.props;\n    var newProps = newNode.props;\n    var key, value;\n    var propsPatches = {};\n\n    //找出不同的属性\n    for (key in oldProps) {\n        value = oldProps[key];\n        if (newProps[key] != value) {\n            count ++;\n            propsPatches[key] = newProps[key];\n        }\n    };\n\n    //找出新增的属性\n    for (key in newProps) {\n        value = newProps[key];\n        if (!oldProps.hasOwnProperty(key)) {\n            count++;\n            propsPatches[key] = newProps[key];\n        }\n    }\n    if (count === 0) {\n        return null;\n    }\n    return propsPatches;\n}\n\n\nfunction diffChildren(oldChildren, newChildren, index, patches, currentPatch) {\n    \n    var diffs = listDiff(oldChildren, newChildren, 'key');\n    newChildren = diffs.children;\n\n    if (diffs.moves.length) {\n        var reorderPatch = {\n            type: patch.REORDER,\n            moves: diffs.moves\n        };\n        currentPatch.push(reorderPatch);\n    }\n    \n    var leftNode = null;\n    var currentNodeIndex = index;\n    util.each(oldChildren, function(child, i) {\n        var newChild = newChildren[i];\n        currentNodeIndex = (leftNode && leftNode.count) ? currentNodeIndex + leftNode.count + 1 : currentNodeIndex + 1;\n        dfsWalk(child, newChild, currentNodeIndex, patches);\n        leftNode = child;\n    });\n}\n\nmodule.exports = diff;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./diff.js\n// module id = 4\n// module chunks = 0","\nfunction diff(oldList, newList, key) {\n    var oldMap = makeKeyIndexAndFree(oldList, key)\n    var newMap = makeKeyIndexAndFree(newList, key)\n\n    var newFree = newMap.free\n\n    var oldKeyIndex = oldMap.keyIndex\n    var newKeyIndex = newMap.keyIndex\n\n    var moves = []\n\n    // a simulate list to manipulate\n    var children = []\n    var i = 0\n    var item\n    var itemKey\n    var freeIndex = 0\n\n    // fist pass to check item in old list: if it's removed or not\n    while (i < oldList.length) {\n        item = oldList[i]\n        itemKey = getItemKey(item, key)\n        if (itemKey) {\n            if (!newKeyIndex.hasOwnProperty(itemKey)) {\n                children.push(null)\n            } else {\n                var newItemIndex = newKeyIndex[itemKey]\n                children.push(newList[newItemIndex])\n            }\n        } else {\n            var freeItem = newFree[freeIndex++]\n            children.push(freeItem || null)\n        }\n        i++\n    }\n\n    var simulateList = children.slice(0)\n\n    // remove items no longer exist\n    i = 0\n    while (i < simulateList.length) {\n        if (simulateList[i] === null) {\n            remove(i)\n            removeSimulate(i)\n        } else {\n            i++\n        }\n    }\n\n    // i is cursor pointing to a item in new list\n    // j is cursor pointing to a item in simulateList\n    var j = i = 0\n    while (i < newList.length) {\n        item = newList[i]\n        itemKey = getItemKey(item, key)\n\n        var simulateItem = simulateList[j]\n        var simulateItemKey = getItemKey(simulateItem, key)\n\n        if (simulateItem) {\n            if (itemKey === simulateItemKey) {\n                j++\n            } else {\n                // new item, just inesrt it\n                if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n                    insert(i, item)\n                } else {\n                    // if remove current simulateItem make item in right place\n                    // then just remove it\n                    var nextItemKey = getItemKey(simulateList[j + 1], key)\n                    if (nextItemKey === itemKey) {\n                        remove(i)\n                        removeSimulate(j)\n                        j++ // after removing, current j is right, just jump to next one\n                    } else {\n                        // else insert item\n                        insert(i, item)\n                    }\n                }\n            }\n        } else {\n            insert(i, item)\n        }\n\n        i++\n    }\n\n    function remove(index) {\n        var move = { index: index, type: 0 }\n        moves.push(move)\n    }\n\n    function insert(index, item) {\n        var move = { index: index, item: item, type: 1 }\n        moves.push(move)\n    }\n\n    function removeSimulate(index) {\n        simulateList.splice(index, 1)\n    }\n\n    return {\n        moves: moves,\n        children: children\n    }\n}\n\n/**\n * Convert list to key-item keyIndex object.\n * @param {Array} list\n * @param {String|Function} key\n */\nfunction makeKeyIndexAndFree(list, key) {\n    var keyIndex = {}\n    var free = []\n    for (var i = 0, len = list.length; i < len; i++) {\n        var item = list[i]\n        var itemKey = getItemKey(item, key)\n        if (itemKey) {\n            keyIndex[itemKey] = i\n        } else {\n            free.push(item)\n        }\n    }\n    return {\n        keyIndex: keyIndex,\n        free: free\n    }\n}\n\nfunction getItemKey(item, key) {\n    if (!item || !key) return void 666\n    \n    return typeof key === 'string'\n        ? item[key]\n        : key(item)\n}\n\n// exports.makeKeyIndexAndFree = makeKeyIndexAndFree // exports for test\n// exports.diff = diff\nmodule.exports = diff;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./listdiff2.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}